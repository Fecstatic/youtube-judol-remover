// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum OrgRole {
  OWNER
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  display_name  String?   @db.VarChar
  todo         Todo[]
  Role         Role[]
  Organization Organization[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  @@unique([id, email])
  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map(name: "sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map(name: "verification_tokens")
}

model Subscription {
  id             String         @id @unique
  price_id       String
  status         String
  period_ends_at DateTime       @db.Timestamp(6)
  Organization   Organization[]
  @@map(name: "subscriptions")
}

model Todo {
  id           String        @id @default(cuid())
  title        String        @db.VarChar
  description  String        @db.VarChar
  user_id      String
  org_id       String
  author       String?       @db.VarChar
  user         User?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization Organization? @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map(name: "todos")
}

model Organization {
  id                 String  @id @default(cuid())
  name               String  @db.VarChar
  picture            String?
  owner_user_id      String
  customer_id         Int? @unique 
  subscription_id    String?
  user         User?         @relation(fields: [owner_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subscription Subscription? @relation(fields: [subscription_id], references: [id], onUpdate: NoAction)
  Role         Role[]
  Todo         Todo[]
  Invite       Invite[]
  @@unique([id, name, picture])
  @@map(name: "organizations")
}

model Role {
  id       String @id @default(cuid())
  org_id   String
  org_name String
  user_id  String
  email    String
  role     OrgRole @default(OWNER)
  picture  String?
  organization Organization? @relation(fields: [org_id, org_name, picture], references: [id, name, picture], onUpdate: Cascade, onDelete: Cascade)
  user         User?         @relation(fields: [user_id, email], references: [id, email], onUpdate: Cascade)
  @@map(name: "roles")
}

model Invite {
  id       String @id @default(cuid())
  org_id   String
  email String
  role String @db.VarChar
  organization Organization? @relation(fields: [org_id], references: [id], onUpdate: NoAction)
  @@map(name: "invites")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map(name: "password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map(name: "two_factor_tokens")
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map(name: "two_factor_confirmation")
}